// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include <HLSLSupport.cginc>
#include "ColorArrays.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<fixed3> _InputTexture;
RWStructuredBuffer<int> _OKHSLArray;

uint _InputTextureResolution;
uint2 _OKHSLArrayResolution;
uint _PaletteSize;

// Texture output stuff
RWTexture2D<float> _OutputArrayTexture;

// Return an array of all converted OKHSL colors
// Returns an array/"image" of which HSV colors are present within the input screenshot
// Essentially an "array" of applicable OKHSL colors
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    fixed3 color = _InputTexture[id.xy].rgb;
    float3 okhsl = RGBtoOKHSL(color);
    
    uint2 arrayCoordinates = ArrayCoordinatesFromOKHSL(okhsl, _OKHSLArrayResolution);
    uint arrayIndex = ArrayIndexFromArrayCoordinates(arrayCoordinates, _OKHSLArrayResolution);
    InterlockedAdd(_OKHSLArray[arrayIndex], 1);

    _OutputArrayTexture[arrayCoordinates] = 1; 
}
