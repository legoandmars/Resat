// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSCalculateArray
#pragma kernel CSPostProcess
#pragma kernel CSMergeArrays
#pragma kernel CSGetPreviewTexture
#pragma kernel CSGetGlobalTexture
#pragma kernel CSGetMergedTexture
#pragma kernel CSClearPreviewArray
#pragma kernel CSClearGlobalArray
#pragma kernel CSClearMetadataArray

#include <HLSLSupport.cginc>
#include "ColorArrays.cginc"

// Input texture, okhsl array, and global okhsl array
Texture2D<fixed3> _InputTexture;
RWStructuredBuffer<uint> _OKHSLArray;
RWStructuredBuffer<uint> _GlobalOKHSLArray;
RWStructuredBuffer<uint> _LargestElementIndexesArray;
RWStructuredBuffer<float4> _TopColorArray;
RWStructuredBuffer<uint> _OtherMetadataArray; // bit annoying needing a second GetData call but whatever man, no InterlockedAdd for floats

uint2 _OKHSLArrayResolution;

// Texture output stuff
RWTexture2D<float> _OutputArrayTexture;

// Return an array of all converted OKHSL colors
// Returns an array/"image" of which HSV colors are present within the input screenshot
// Essentially an "array" of applicable OKHSL colors
[numthreads(8,8,1)]
void CSCalculateArray (uint3 id : SV_DispatchThreadID)
{
    fixed3 color = _InputTexture[id.xy].rgb; 
    float3 okhsl = RGBtoOKHSL(color);
    
    uint2 arrayCoordinates = ArrayCoordinatesFromOKHSL(okhsl, _OKHSLArrayResolution);
    uint arrayIndex = ArrayIndexFromArrayCoordinates(arrayCoordinates, _OKHSLArrayResolution);
    InterlockedAdd(_OKHSLArray[arrayIndex], 1);

    // _OutputArrayTexture[arrayCoordinates] = 1; 
}

int GetIndexFromId(uint3 id)
{
    return id.x + (id.y * _OKHSLArrayResolution);
}

int MergeArrays(uint3 id)
{
    return _OKHSLArray[GetIndexFromId(id)] + _GlobalOKHSLArray[GetIndexFromId(id)];  
}

// Permanently merge the preview array into the global array
// _OKHSLArray, _GlobalOKHSLArray
[numthreads(8,8,1)]
void CSMergeArrays (uint3 id : SV_DispatchThreadID)
{
    _GlobalOKHSLArray[GetIndexFromId(id)] = MergeArrays(id);
}

// Zero out global array
// _GlobalOKHSLArray
[numthreads(8,8,1)]
void CSClearGlobalArray (uint3 id : SV_DispatchThreadID)
{
    _GlobalOKHSLArray[GetIndexFromId(id)] = 0;
}

// Zero out preview array
// _OKHSLArray
[numthreads(8,8,1)]
void CSClearPreviewArray (uint3 id : SV_DispatchThreadID)
{
    _OKHSLArray[GetIndexFromId(id)] = 0;
}

// Zero out metadata array
// _OtherMetadataArray
[numthreads(1,1,1)]
void CSClearMetadataArray (uint3 id : SV_DispatchThreadID)
{
    _OtherMetadataArray[0] = 0;
    _OtherMetadataArray[1] = 0;
}

// Get the preview texture (preview array only)
// _OutputArrayTexture, _OKHSLArray, _OKHSLArrayResolution
[numthreads(8,8,1)]
void CSGetPreviewTexture (uint3 id : SV_DispatchThreadID)
{
    _OutputArrayTexture[id.xy] = _OKHSLArray[GetIndexFromId(id)];
}

// Get the global texture (global array only)
// _OutputArrayTexture, _GlobalOKHSLArray, _OKHSLArrayResolution
[numthreads(8,8,1)]
void CSGetGlobalTexture (uint3 id : SV_DispatchThreadID)
{
    _OutputArrayTexture[id.xy] = _GlobalOKHSLArray[GetIndexFromId(id)];
}

// Get the merged texture (a combination of the preview array and global array)
// _OutputArrayTexture, _OKHSLArray, _GlobalOKHSLArray, _OKHSLArrayResolution
[numthreads(8,8,1)]
void CSGetMergedTexture (uint3 id : SV_DispatchThreadID)
{
    _OutputArrayTexture[id.xy] = MergeArrays(id);
}


// Contains all postprocessing data
// First, we have a _TopColorsCount amount of top colors in the format: (r, g, b, amount_seen), (h, s, l, arrayindex)
// Next, a color with the following data: (TotalUniqueColorsInPhoto, ColorCoveragePercentage, null, null)

// uses a scuffed sort
// first thread is set to image Y length
// returns unsorted (y_length) elements, guaranteed to be the largest (y_length) elements in the list

// TECHNICALLY this will only return one color per row, so if every good color is crammed into one row it might not be quite right
[numthreads(8,1,1)]
void CSPostProcess (uint3 id : SV_DispatchThreadID)
{
    // TODO: way to not return existing global colors as top colors?
    uint newColorCount = 0;
    uint colorCount = 0;
    
    int startIndex = id.x * _OKHSLArrayResolution.x;

    uint maxValue = 0;
    uint maxIndex = 0;
    
    for (int i = 0; i < (int)_OKHSLArrayResolution.x; i++)
    {
        uint index = startIndex + i;
        uint value = _OKHSLArray[index];
        
        if (value > maxValue)
        {
            maxValue = value;
            maxIndex = index;
        }

        if (value != 0)
        {
            colorCount += 1;
            
            // TODO: Do the below bit as a merge before to save perf
            if (_GlobalOKHSLArray[index] == 0)
            {
                newColorCount += 1;
            }
        }
    }

    float3 okhsl = OKHSLFromArrayIndex(maxIndex, _OKHSLArrayResolution);
    float3 rgb = OKHSLtoRGB(okhsl);
    
    _TopColorArray[(id.x * 2)] = float4(rgb.r, rgb.g, rgb.b, maxValue);
    _TopColorArray[(id.x * 2) + 1] = float4(okhsl.r, okhsl.g, okhsl.b, maxIndex);

    // Add our extra metadata
    InterlockedAdd(_OtherMetadataArray[0], colorCount);
    InterlockedAdd(_OtherMetadataArray[1], newColorCount);
}